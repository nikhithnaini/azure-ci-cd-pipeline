trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main 

jobs:
  - job: CI_CD_Deploy
    displayName: "CI/CD Deployment Pipeline"
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      # Step 1: Set Fetch Depth
      - checkout: self
        fetchDepth: 0

      # Step 2: Prepare Analysis Configuration
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud'  # Use your SonarQube connection name
          scannerMode: 'Other'
          configMode: 'manual'
          projectKey: 'project-key'
          projectName: 'project_name'
          organization: 'organization-name'
          extraProperties: |
            sonar.projectKey=<project-key>
            sonar.organization=<organization-name>

      # Step 3: Build Step (Add your build commands here, for example)
      - task: NodeTool@0
        inputs:
          versionSpec: '22.x'
        displayName: 'Install Node.js'
      
      - script: |
          npm ci
          npm run build
        displayName: 'Build the project'
        
      - script: |
          npm test
        displayName: 'Run Tests
      # Step 4: Run Code Analysis
      - task: SonarQubeAnalyze@5

      # Step 5: Publish Quality Gate Result (Optional)
      - task: SonarQubePublish@5
        inputs:
          pollingTimeoutSec: '300'  # Time to wait for the analysis to complete before timing out

      # -----------------------------------------
      # Fetch Secrets from Azure Key Vault
      # -----------------------------------------
      - task: AzureKeyVault@2
        displayName: "Fetch Secrets from Azure Key Vault"
        inputs:
          azureSubscription: "AzureDependant"
          KeyVaultName: "$(KEY-VAULT-NAME)"
          SecretsFilter: "ACR-NAME, APP-NAME, RESOURCE-GROUP, MANAGED-IDENTITY-NAME, SUBSCRIPTION-ID, SERVICE-PRINCIPAL-ID, LOG-ANALYTICS-WORKSPACE-ID, IMAGE-NAME"
          runAsPreJob: false

      # -----------------------------------------
      # Validate if ACR Exists
      # -----------------------------------------
      - task: AzureCLI@2
        displayName: "Validate ACR Existence"
        inputs:
          azureSubscription: "AzureDependant"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            echo "Checking if ACR $(ACR-NAME) exists..."
            if ! az acr show --name $(ACR-NAME) --resource-group $(RESOURCE-GROUP) &> /dev/null; then
              echo "ERROR: ACR $(ACR-NAME) does not exist. Please create it first."
              exit 1
            fi
            echo "✅ ACR $(ACR-NAME) exists."

      # -----------------------------------------
      # Validate if Web App Exists
      # -----------------------------------------
      - task: AzureCLI@2
        displayName: "Validate Web App Existence"
        inputs:
          azureSubscription: "AzureDependant"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            echo "Checking if Web App $(APP-NAME) exists..."
            if ! az webapp show --name $(APP-NAME) --resource-group $(RESOURCE-GROUP) &> /dev/null; then
              echo "ERROR: Web App $(APP-NAME) does not exist. Please create it first."
              exit 1
            fi
            echo "✅ Web App $(APP-NAME) exists."

      # -----------------------------------------
      # Build and Push Docker Image to ACR
      # -----------------------------------------
      - task: AzureCLI@2
        displayName: "Build & Push Docker Image to ACR"
        inputs:
          azureSubscription: "AzureDependant"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            echo "Logging into ACR..."
            az acr login --name $(ACR-NAME)

            echo "Building Docker image..."
            docker build -t $(ACR-NAME).azurecr.io/myapp:$(Build.BuildId) .

            echo "Pushing Docker image to ACR..."
            docker push $(ACR-NAME).azurecr.io/myapp:$(Build.BuildId)

            echo "Verifying image in ACR..."
            az acr repository list --name $(ACR-NAME) -o table

      # -----------------------------------------
      # Deploy Container to Web App
      # -----------------------------------------
      - task: AzureCLI@2
        displayName: "Deploy Container to Web App"
        inputs:
          azureSubscription: "AzureDependant"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            echo "Updating Web App to use ACR image with Managed Identity..."
            az webapp config container set \
              --name $(APP-NAME) \
              --resource-group $(RESOURCE-GROUP) \
              --container-image-name $(ACR-NAME).azurecr.io/myapp:$(Build.BuildId) \
              --container-registry-url https://$(ACR-NAME).azurecr.io \
              --container-registry-user $(SERVICE-PRINCIPAL-ID)

      # -----------------------------------------
      # Validate Log Analytics Workspace
      # -----------------------------------------
      - task: AzureCLI@2
        displayName: "Validate Log Analytics Workspace"
        inputs:
          azureSubscription: "AzureDependant"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            echo "Checking if Log Analytics Workspace $(LOG-ANALYTICS-WORKSPACE-ID) exists..."
            if ! az monitor log-analytics workspace show --resource-group $(RESOURCE-GROUP) --workspace-name $(LOG-ANALYTICS-WORKSPACE-ID) &> /dev/null; then
              echo "ERROR: Log Analytics Workspace $(LOG-ANALYTICS-WORKSPACE-ID) does not exist. Please create it first."
              exit 1
            fi
            echo "✅ Log Analytics Workspace $(LOG-ANALYTICS-WORKSPACE-ID) exists."

      # -----------------------------------------
      # Enable Web App Log Analytics
      # -----------------------------------------
      - task: AzureCLI@2
        displayName: "Enable Web App Log Analytics"
        inputs:
          azureSubscription: "AzureDependant"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            echo "Fetching Log Analytics Workspace ID..."
            LOG_ANALYTICS_ID=$(az monitor log-analytics workspace show \
              --resource-group $(RESOURCE-GROUP) \
              --workspace-name $(LOG-ANALYTICS-WORKSPACE-ID) \
              --query "id" -o tsv)

            if [ -z "$LOG_ANALYTICS_ID" ]; then
              echo "ERROR: Log Analytics Workspace ID not found!"
              exit 1
            fi

            echo "Log Analytics Workspace ID: $LOG_ANALYTICS_ID"

            echo "Configuring Diagnostic Settings for Web App..."
            az monitor diagnostic-settings create \
              --name "WebAppLogs" \
              --resource "/subscriptions/$(SUBSCRIPTION-ID)/resourceGroups/$(RESOURCE-GROUP)/providers/Microsoft.Web/sites/$(APP-NAME)" \
              --logs '[{"category": "AppServiceHTTPLogs", "enabled": true}, {"category": "AppServiceConsoleLogs", "enabled": true}, {"category": "AppServiceAppLogs", "enabled": true}]' \
              --metrics '[{"category": "AllMetrics", "enabled": true}]' \
              --workspace "$LOG_ANALYTICS_ID"
